<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CO₂ Dashboard</title>
  <link rel="stylesheet" href="/styles.css">
  <link rel="stylesheet" href="/style.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>

<body>
  <div id="loader" class="loader"></div>
  <main>
    <section class="current-co2 track-card">
      <div class="co2-display">
        <h2>Alkaline-Tesseract</h2>
        <h3>Current CO₂ Level</h3>
        <p><%= co2Data.length > 0 ? co2Data[0].y + ' ppm' : 'No Data' %></p>
        <p>Last Updated: <%= lastUpdated ? lastUpdated : 'No Data' %></p>
      </div>
    </section>
    <section class="track-card co2-graph">
      <div id="chartContainer" style="width:100%; height:280px">
        <canvas id="chart"></canvas>
      </div>
    </section>
    <section class="track-card filter-toggle">
      <label for="filterOn">Filter Status:</label>
      <button id="filter-toggle-button" class="filter-button <%= filterOn %2? 'on' : 'off' %>" data-doc-id="<%= docId %>" data-filter-on="<%= filterOn  %2 %>"><%=filterOn%2?'On':'Off'%></button>
    </section>
  </main>
  <script type="text/javascript" src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
  <script type="text/javascript" src="https://cdn.canvasjs.com/canvasjs.min.js"></script>
  <script src="https://cdn.canvasjs.com/canvasjs.stock.min.js"></script>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      document.getElementById('loader').style.display = "none";

      const canvasElement = document.getElementById('chart');

      if (canvasElement && canvasElement instanceof HTMLCanvasElement) {
        const ctx = canvasElement.getContext('2d');

        if (ctx) {
          let co2Data = JSON.parse('<%- JSON.stringify(co2Data) %>');
          // Reverse the data to display the oldest reading first
          co2Data = co2Data.reverse();
          // Create the chart
          var stockChart = new CanvasJS.StockChart("chartContainer", {
            title: {
              text: "CO2 Levels Over Time",
              fontColor: "#7a3170" // Title color
            },
            animationEnabled: true,
            exportEnabled: true,
            backgroundColor: "#f0f0f0", // Background color
            charts: [{
              axisX: {
                title: "Time (seconds ago)",
                titleFontColor: "#000", // Axis title color
                labelFontColor: "#7a3170", // Label color
                crosshair: {
                  enabled: true,
                  snapToDataPoint: true,
                  color: "#7a3170" // Crosshair color
                },
                lineColor: "#000", // Axis line color
                tickColor: "#000" // Tick marks color
              },
              axisY: {
                title: "CO2 Level (ppm)",
                titleFontColor: "#000", // Axis title color
                labelFontColor: "#7a3170", // Label color
                crosshair: {
                  enabled: true,
                  color: "#7a3170" // Crosshair color
                },
                gridColor: "#e0e0e0", // Gridline color
                lineColor: "#000", // Axis line color
                tickColor: "#000" // Tick marks color
              },
              data: [{
                type: "spline", // Changed to spline for smooth curves
                dataPoints: co2Data,
                color: "#7a3170", // Line color
                markerColor: "#000", // Marker color
                lineThickness: 2 // Line thickness
              }]
            }],
            rangeSelector: {
              inputFields: {
                startValue: co2Data[0].x,
                endValue: co2Data[co2Data.length - 1].x,
                valueFormatString: "###0"
              },
              buttons: [{
                label: "10s",
                range: 10,
                rangeType: "number"
              }, {
                label: "30s",
                range: 30,
                rangeType: "number"
              }, {
                label: "1m",
                range: 60,
                rangeType: "number"
              }, {
                label: "All",
                rangeType: "all"
              }]
            }
          });
          stockChart.render();

        }

      } else {
        console.error("Failed to get canvas context. Ensure the canvas element exists.");
      }

      // Handle filter toggle button click
      const filterToggleButton = document.getElementById('filter-toggle-button');
      if (filterToggleButton) {
        filterToggleButton.addEventListener('click', async function() {
          const docId = filterToggleButton.getAttribute('data-doc-id');
          const filterOn = filterToggleButton.getAttribute('data-filter-on') === 'true';
          const newFilterStatus = !filterOn;

          try {
            const response = await fetch('/toggle-filter', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                docId: docId,
                filterOn: newFilterStatus
              })
            });
            const result = await response.json();
            if (result.success) {
              filterToggleButton.setAttribute('data-filter-on', newFilterStatus);
              filterToggleButton.classList.toggle('on');
              filterToggleButton.classList.toggle('off');
              const icon = filterToggleButton.querySelector('i');
              if (icon) {
                icon.classList.toggle('fas');
                icon.classList.toggle('fa-toggle-on');
                icon.classList.toggle('fa-toggle-off');
              }
              filterToggleButton.textContent = newFilterStatus % 2 ? 'Off' : 'On';
            }
          } catch (error) {
            console.error('Error updating filter status:', error);
          }
        });
      }
    });
  </script>
</body>

</html>