<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CO₂ Dashboard</title>
  <link rel="stylesheet" href="/styles.css">
  <link rel="stylesheet" href="/style.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>

<body>
  <div id="loader" class="loader"></div>
  <main>
    <section class="current-co2">
      <div class="co2-display">
        <h2>Alkaline-Tesseract</h2>
        <h3>Current CO₂ Level</h3>
        <p><%= co2Data.length > 0 ? co2Data[0].y + ' ppm' : 'No Data' %></p>
        <p>Last Updated: <%= lastUpdated ? lastUpdated : 'No Data' %></p>
      </div>
    </section>
    <section class="co2-graph">
      <script type="text/javascript" src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
      <script type="text/javascript" src="https://cdn.canvasjs.com/canvasjs.min.js"></script>

      <div id="chartContainer" style="width:100%; height:280px"></div>
      <button id="addDataPoint">Add Data Point</button>
      <button id="updateDataPoint">Update Data Point</button>
    </section>
    <section class="co2-graph">
      <h2>CO₂ Levels Over Time</h2>
      <canvas id="chart"></canvas> <!-- Ensure this is a <canvas> element -->
    </section>
    <section class="filter-toggle">
      <label for="filterOn">Filter Status:</label>
      <button id="filter-toggle-button" class="filter-button <%= filterOn %2? 'on' : 'off' %>" data-doc-id="<%= docId %>" data-filter-on="<%= filterOn  %2 %>"><%=filterOn%2?'On':'Off'%></button>
    </section>
  </main>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      document.getElementById('loader').style.display = "none";

      const canvasElement = document.getElementById('chart');

      if (canvasElement && canvasElement instanceof HTMLCanvasElement) {
        const ctx = canvasElement.getContext('2d');

        if (ctx) {
          let co2Data = JSON.parse('<%- JSON.stringify(co2Data) %>');

          // Reverse the data to display the oldest reading first
          co2Data = co2Data.reverse();

          // Create the chart
          var chart = new CanvasJS.Chart("chartContainer", {
            title: {
              text: "CO2 Levels Over Time"
            },
            axisX: {
              title: "Time (seconds ago)"
            },
            axisY: {
              title: "CO2 Level (ppm)"
            },
            data: [{
              type: "line",
              dataPoints: co2Data // Reversed data
            }]
          });
          chart.render();

          // Add data point button logic
          $("#addDataPoint").click(function() {
            var length = chart.options.data[0].dataPoints.length;
            chart.options.title.text = "New DataPoint Added at the end";
            chart.options.data[0].dataPoints.push({
              y: 25 - Math.random() * 10
            });
            chart.render();
          });

          // Update data point button logic
          $("#updateDataPoint").click(function() {
            var length = chart.options.data[0].dataPoints.length;
            chart.options.title.text = "Last DataPoint Updated";
            chart.options.data[0].dataPoints[length - 1].y = 15 - Math.random() * 10;
            chart.render();
          });
        }

        ////////////////////////////////
        // const chart = new Chart(ctx, {
        //   type: 'line',
        //   data: {
        //     labels: labels,
        //     datasets: [{
        //       label: 'CO₂ Concentration (ppm)',
        //       data: dataPoints,
        //       borderColor: 'teal',
        //       backgroundColor: 'rgba(0, 128, 128, 0.2)',
        //       fill: true,
        //       tension: 0.4,
        //       pointRadius: 3,
        //       pointHoverRadius: 6,
        //     }]
        //   },
        //   options: {
        //     responsive: true,
        //     plugins: {
        //       legend: {
        //         display: true
        //       },
        //       tooltip: {
        //         enabled: true,
        //         mode: 'index',
        //         intersect: false
        //       }
        //     },
        //     scales: {
        //       x: {
        //         title: {
        //           display: true,
        //           text: 'Time'
        //         },
        //         grid: {
        //           display: false
        //         },
        //         reverse: true // Reverse the order of the x-axis to correctly display from latest to earliest
        //       },
        //       y: {
        //         title: {
        //           display: true,
        //           text: 'CO₂ Concentration (ppm)'
        //         },
        //         min: 0 // Set the minimum value for the y-axis to 0
        //       }
        //     }
        //   }
        // });
      } else {
        console.error("Failed to get canvas context. Ensure the canvas element exists.");
      }

      // Handle filter toggle button click
      const filterToggleButton = document.getElementById('filter-toggle-button');
      if (filterToggleButton) {
        filterToggleButton.addEventListener('click', async function() {
          const docId = filterToggleButton.getAttribute('data-doc-id');
          const filterOn = filterToggleButton.getAttribute('data-filter-on') === 'true';
          const newFilterStatus = !filterOn;

          try {
            const response = await fetch('/toggle-filter', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                docId: docId,
                filterOn: newFilterStatus
              })
            });
            const result = await response.json();
            if (result.success) {
              filterToggleButton.setAttribute('data-filter-on', newFilterStatus);
              filterToggleButton.classList.toggle('on');
              filterToggleButton.classList.toggle('off');
              const icon = filterToggleButton.querySelector('i');
              if (icon) {
                icon.classList.toggle('fas');
                icon.classList.toggle('fa-toggle-on');
                icon.classList.toggle('fa-toggle-off');
              }
              filterToggleButton.textContent = newFilterStatus ? 'Turn Off Filter' : 'Turn On Filter';
            }
          } catch (error) {
            console.error('Error updating filter status:', error);
          }
        });
      }
    });
  </script>
</body>

</html>